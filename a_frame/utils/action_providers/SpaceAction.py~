import abc
from a_frame.utils.action_providers.action_base import ActionBase
from jnpr.junos import Device
from jnpr.junos.utils.config import Config
from jnpr.junos.exception import *
from lxml import etree
import re
import json

import pprint as pprint
import requests, json
import xml.etree.ElementTree as ET
from jnpr.junos import Device
from jnpr.junos import exception
from jnpr.junos.utils.config import Config
import urllib3

# Disable warning about SSL
# If customer's CA is available, check this- http://docs.python-requests.org/en/latest/user/advanced/ to change behaviour
requests.packages.urllib3.disable_warnings()
# Username and password to connect to Junos Space
svcUser = 'super'
svcPass = 'Juniper123!'
# default Space server
jnprServer = 'https://10.8.158.219/'
# URLs to connect
# List all devices
getDeviceURL = jnprServer + 'api/space/device-management/devices'
# Create Hornet Queue
createQueueURL = jnprServer + 'api/hornet-q/queues'
# Config-change
configChangeURL = jnprServer + 'api/space/configuration-management/change-requests?queue=https://space.pfr.inetsix.net/api/hornet-q/queues/jms.queue.'



class SpaceAction(ActionBase):
    """
        Uses NetConf to execute the given template
        Can execute template as an op command
        or apply the template as a configuration template
    """

    dev = None
    request_type = "apply_template"
    result_msg = ""
    print('Entering SpaceAction class')
    
    def set_endpoint(self, endpoint):
        self.endpoint_ip = endpoint["ip"]
        #self.endpoint_username = endpoint["username"]
        #self.endpoint_password = endpoint["password"]
        return

    def execute_template(self, template):
        """
        switches based on request_type chosen from template configuration
        :param template:
        :return: String results from the endpoint netconf subsystem
        """
	print('entering execute_template')
        '''if self.dev is None:
	    print('entering self.dev is none')
            return self.result_msg'''

        if self.request_type == "apply_template":
	    print('calling apply_template')
            return self.apply_template(template)



    def apply_template(self, template):
	print 'entering apply_template function'
        print self.dev
        conf_string = template.replace(" ", "")

        print conf_string

        if re.search(r"^&lt;", conf_string):
            print "Found a encoded string"
            conf_string = self.unescape(conf_string)

        print conf_string
        # try to determine the format of our config_string
        config_format = "set"
        if re.search(r"^\s*<.*>$", conf_string, re.MULTILINE):
            print "found xml style config"
            config_format = "xml"
        elif re.search(r"^\s*(set|delete|replace|rename)\s", conf_string):
            print "found set style config"
            config_format = "set"
        elif re.search(r"^[a-z:]*\s*\w+\s+{", conf_string, re.I) and re.search(r".*}\s*$", conf_string):
            print "found a text style config"
            config_format = "text"

        print "using format: " + config_format

        

        try:
            # create the required iterator from the endpoint_list
            print 'Getting device ID based on its managed IP: 10.8.106.70'
            device = self.getDeviceID(self.endpoint_ip)
	    print'in here 1...'
            if device is not False:
                print ' * Found device ' + str(device['name']) + ' with reference: ' + str(device['key'])
                print 'Create queue to host async job with API: jnprQueue'
                if (self.createHornetQueue('jnprQueue') is True):
                    jobId = self.pushConfig(conf_string, deviceId=str(device['key']))
                    print 'Change is in progress - check job ID ' + str(jobId)
            else:
                print ' * Device not found'

        except Exception as err:
            print "Could not get JobID from management IP or pushConfig failed"
            self.result_msg = str(err)
	    print(str(err))
            self.dev = None

        return
    
    @staticmethod
    def unescape(s):
        s = s.replace("&lt;", "<")
        s = s.replace("&gt;", ">")
        s = s.replace("&amp;", "&")
        return s

    @staticmethod
    def format_results(results):
        """
        detects string format (xml || json) and formats appropriately
        :param results: string from urlopen
        :return: formatted string output
        """
        print results
        try:
            if type(results) is str:
                results = etree.fromstring(results)

            print "found valid xml, formatting and returning"
            # use pretty_print if we have an xml document returned
            return etree.tostring(results, pretty_print=True)
        except ValueError:
            pass
        except TypeError:
            pass

        # is the result valid json?
        try:
            json_string = json.loads(results)
            print "Found JSON results"
            return json.dumps(json_string, indent=4)
        except ValueError:
            pass
        except TypeError:
            pass

        print "no special formatting, returning"
        return results
    
    def getDeviceID(self, ip):
    # Collect information from space
	print'entering getDeviceID function'
	print('ip obtained is:', ip)
        getDevices = requests.get(getDeviceURL, auth=(svcUser, svcPass), verify=False,
                              headers={
                                  'Accept': 'application/vnd.net.juniper.space.device-management.devices+xml;version=1'})
    # Parse result as an XML Tree
        xmlRoot = ET.fromstring(getDevices.text)
        for neighbor in xmlRoot.findall('device'):
        # Extract basic information from XML result
            name = neighbor.find('name').text
            key = neighbor.get('key')
            ipAddr = neighbor.find('ipAddr').text
            uri = neighbor.get('uri')
        # If hostname is equal to device we want to manage, we collect information and send them back
            if ipAddr == ip:
                result = {}
                result['name'] = name
                result['key'] = key
                result['uri'] = uri
                return result
        return False
    
    
    
    def createHornetQueue(self, queue):
        queueCreation = "<queue name=\"" + queue + "\"><durable>false</durable></queue>"
        createQueue = requests.post(createQueueURL, auth=(svcUser, svcPass), verify=False,
                                headers={'Content-Type': 'application/hornetq.jms.queue+xml'},
                                data=queueCreation)
    # Check status code to ensure Queue is present on space server
        if createQueue.status_code == 201:
        # print 'Queue '+queue+' has been created'
            return True
        elif createQueue.status_code == 412:
        # print 'Queue was already configured'
            return True
        else:
            print '[Error] - Cannot create Queue ' + queue
    # Default: return false
        return False
    
    
    #def pushConfig(self, conf_string, deviceId="458780", queue="jnprQueue"):
    def pushConfig(self, conf_string, deviceId, queue="jnprQueue"):
    # Static configuration template to use
    	print'inside pushConfig, conf_string is:'
        
    	print conf_string
	template = conf_string
        #template = "<change-request><name>Change Hostname</name><description>Change hostname of a Junos device</description><xmlData><![CDATA[<configuration>  <system>   <host-name>EX4200_S70_updated_on_may_22</host-name>  </system></configuration>]]></xmlData><device href=\"/api/space/device-management/devices/" + deviceId + "\"/>  <syncAfterPush>" + 'true' + "</syncAfterPush>  </change-request>"

    	#template = "<change-request><name>Set Vlan</name><description>Set Vlan of a Junos device</description><xmlData><![CDATA[<configuration>  <vlans>  <vlan> <name>vlan100</name>   <vlan-id>100</vlan-id>  </vlan>   </vlans>   </configuration>]]></xmlData><device href=\"/api/space/device-management/devices/" + deviceId + "\"/>  <syncAfterPush>" + 'true' + "</syncAfterPush>  </change-request>"
    #template = "<change-request><name>Change Hostname</name><description>Change hostname of a Junos device</description><xmlData><![CDATA[<configuration>  <system>   <host-name>EX4200_S70_updated_frm_Python</host-name>  </system></configuration>]]></xmlData><device href=\"/api/space/device-management/devices/" + deviceId + "\"/>  <syncAfterPush>" + 'true' + "</syncAfterPush>  </change-request>"
        print 'template is:'
	print template
    ### Forge URL to consume API using custom queue:
	print'configChangeURL is'
	print configChangeURL
        configChangePOST = configChangeURL + queue
	print'configChangePOST is'
	print configChangePOST
    ### Consume Space API with a POST command:
        changeConfig = requests.post(configChangePOST, auth=(svcUser, svcPass), verify=False,
                                 headers={
                                     'Content-Type': 'application/vnd.net.juniper.space.configuration-management.change-request+xml;version=1;charset=UTF-8'},
                                 data=template)
	print 'changeConfig.text is: '        
	print changeConfig.text
    # <?xml version="1.0" encoding="UTF-8" standalone="yes"?><task href="/api/space/job-management/jobs/526890"><id>526890</id></task>#
        print'doing xml parsing'
	xmlRoot = ET.fromstring(changeConfig.text)
	
        for task in xmlRoot.findall('id'):
            jobId = task.text
            return jobId
